version: "3.8" # Docker Compose 파일의 버전을 지정합니다.

services: # Docker Compose로 정의할 서비스들을 나열합니다.
  postgres: # PostgreSQL 데이터베이스 서비스 정의
    image: postgres:latest # 공식 PostgreSQL 이미지를 사용합니다.
    env_file: # 환경 변수를 정의한 파일을 참조합니다.
      - .env # .env 파일을 통해 PostgreSQL 환경 변수를 설정합니다.
    ports:
      - "5432:5432" # 호스트의 5432 포트를 컨테이너의 5432 포트에 매핑합니다.
    volumes:
      - postgres_data:/var/lib/postgresql/data # 데이터 영속성을 위해 볼륨을 사용하여 PostgreSQL 데이터를 저장합니다.

  rust-app: # Rust 애플리케이션 서비스 정의
    build:
      context: . # 현재 디렉토리를 빌드 컨텍스트로 사용합니다.
      dockerfile: Dockerfile.rust # Rust 애플리케이션을 빌드하기 위한 Dockerfile을 지정합니다.
    env_file: # 환경 변수를 정의한 파일을 참조합니다.
      - .env # .env 파일을 통해 Rust 애플리케이션의 환경 변수를 설정합니다.
    ports:
      - "13389:13389" # 호스트의 13389 포트를 컨테이너의 13389 포트에 매핑합니다.
    depends_on:
      - postgres # Rust 애플리케이션은 PostgreSQL 서비스가 시작된 후에 시작됩니다.

  oracledb-test: # Oracle 데이터베이스 테스트 서비스 정의
    build:
      context: . # 현재 디렉토리를 빌드 컨텍스트로 사용합니다.
      dockerfile: Dockerfile.oracle-test # Oracle 클라이언트 테스트를 위한 Dockerfile을 지정합니다.
    container_name: oracledb-test # 컨테이너 이름을 oracledb-test로 설정합니다.
    environment:
      - LD_LIBRARY_PATH=/opt/oracle/instantclient_21_14 # Oracle Instant Client의 라이브러리 경로를 설정합니다.
    stdin_open: true # 컨테이너의 stdin을 열어두어 인터랙티브 모드를 사용할 수 있게 합니다.
    tty: true # 가상 터미널 할당을 활성화하여 터미널 연결을 유지합니다.
    networks:
      - app-network # 해당 서비스가 연결될 네트워크를 지정합니다.

networks: # 네트워크 정의
  app-network: # 사용자 정의 네트워크 이름
    driver: bridge # 브릿지 네트워크를 사용합니다. 기본적인 Docker 네트워킹 옵션입니다.

volumes: # 데이터 영속성을 위한 볼륨 정의
  postgres_data: # PostgreSQL 데이터를 저장할 사용자 정의 볼륨 이름
